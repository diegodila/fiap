A01-230321

http://
protocol 

localhost:
hostname

8888
port 

/hello
path

http://localhost:8888/hello

 
get / não tão seguro 


gerar um arquivo war 
ou .jar 
clicar em deploy 
lib fica todas as dependencias


onde muda a porta do tomcat é no file server

file > new > dynamic web > Project name: AppTest > default location

new server (aba) > apache > next > tomcat installation directory: path/name/tomcat/(raiz) > JRE default: jdk11 or jdk 8 > next > add name: appTest > finish

------------------------------------------------------
A02.1 250321

src > package:br.com.fiap > new class: OiMundoServlet

@WebServlet() > faz o import do javax 

> @WebServlet(urlPatterns = "/oi")

> class OiMundoServlet extends HttpServlet {

>crtl espaco > service > @override

> PrintWriter out = resp.getWriter();

> out.println("<html>");
  out.println("<body>");
  out.println("Hello world,");
  out.println("<body>");
  out.println("<html>");

------------------------------------------------------
A03.1

file > new > maven project > create a simple  project (skip archetype.. > next >group id: br.com.fiap > artifact: spring-mvc > version: snapshot > packaging: jar > name: spring-mvc >

pom é onde config as dependencias
resources é onde ficam os htmls e javascripts

<build>
<sourceDirectory>src/main/java</sourceDirectory>

  <plugins>
  <plugin>
  <artifactId>maven-compiler-plugin</artifactId>
  <version>3.8.1</version>
  <configuration>
  <source>11.0</source>
  <target>11.0</target>
  </configuration>
  </plugin>
  
  <plugin>
  <artifactId>maven-war-plugin</artifactId>
                                  <version>3.3.1</version>
     <configuration>             <warSourceDirectory>src/main/webapp</warSourceDirectory>
     </configuration>
  </plugin>
  </plugins>
</build>

abaixo do tag description or name

maven > update project >

criar folder WEB-INF dentro de webapp 
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://xmlns.jcp.org/xml/ns/javaee"
  xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
  id="WebApp_ID" version="3.1">
  <display-name>spring-mvc</display-name>

  <welcome-file-list>
  <welcome-file></welcome-file>
  </welcome-file-list>
</web-app> 

lembrar de identar 

webapp > html file > name:ola.html

adicionar ao pom.xml

<properties>
  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  <spring.version>5.1.5.RELEASE</spring.version>
</properties>


<dependencies>
  <!-- DEPENDÊNCIAS DO SPRING -->
  <dependency>
  <groupId>org.springframework</groupId>
  <artifactId>spring-core</artifactId>
  <version>${​​​​​spring.version}​​​​​</version>
  </dependency>
</dependencies>

lembrar dos settings

pom onde configuramos as dependencias

------------------------------------------------------
A05

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
xmlns:th="http://www.thymeleaf.org">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />
<title>Cadastro Convidados</title>
<link th:href="@{​​​​​/webjars/bootstrap/css/bootstrap.min.css}​​​​​"
rel="stylesheet" />
<link th:href="@{​​​​​/webjars/bootstrap/css/bootstrap-theme.min.css}​​​​​"
rel="stylesheet" />
</head>

<body>
<div class="panel panel-default" style="margin: 10px">
<div class="panel-heading">
<h1 class="panel-title">Lista de convidados</h1>
</div>
<div class="panel-body">
<form class="form-inline" method="POST" th:object="${​​​​​convidado}​​​​​" th:action="@{​​​​​/convidados}​​​​​" style="margin: 20px 0">
<div class="form-group">
<input type="text" class="form-control" placeholder="Nome" th:field="*{​​​​​nome}​​​​​" />
<input type="text" class="form-control" placeholder="E-mail" th:field="*{​​​​​email}​​​​​" />
<input type="text" class="form-control" placeholder="Acompanhantes" th:field="*{​​​​​acompanhante}​​​​​"/>
<button type="submit" class="btn btn-primary">Adicionar</button>
</div>
</form>
<table class="table">
<thead>
<tr>
<th>Nome</th>
<th>E-mail</th>
<th>Acompanhantes</th>
</tr>
</thead>
<tbody>
<tr th:each="convidado : ${​​​​​convidados}​​​​​">
<td th:text="${​​​​​convidado.nome}​​​​​"></td>
<td th:text="${​​​​​convidado.email}​​​​​"></td>
<td th:text="${​​​​​convidado.acompanhante}​​​​​"></td>
</tr>
</tbody>
</table>
</div>
</div>
<script th:src="@{​​​​​/webjars/jquery/jquery.min.js}​​​​​"></script>
<script th:src="@{​​​​​/webjars/bootstrap/js/bootstrap.min.js}​​​​​"></script>
</body>
</html>


a primeira action request mapping  @GetMapping só serve para abrir o html, depois pelo botão atraves do post passamos os dados para uma outra view 
então no form html inicial tem uma action que tem o path e o method dela
esse 	@PostMapping("/salve") escuta esse html 

e depois o metodo save salva no Jpa 	repository.save(servicemodel);

podemos usar duas nomeclaturas para a Model, tanto Entity quanto Models

a partir do momento que colocamos o get mapping ele começa a escutar aquele contexto
@GetMapping("/adding")

o application.properties mudamos a port que o servidor esta escutando

para add o bootstrap precisamos adicionar no pom as dependencias

<dependency>
    <groupId>org.webjars</groupId>
    <artifactId>jquery</artifactId>
    <version>3.6.0</version>
</dependency>


<dependency>
    <groupId>org.webjars</groupId>
    <artifactId>bootstrap</artifactId>
    <version>5.0.0-beta3</version>
</dependency>

    
<dependency>
  <groupId>org.webjars</groupId>
  <artifactId>webjars-locator-core</artifactId>
  <version>0.46</version>
</dependency>

ai no final do body antes de FECHAR, temos que colocar as dependencias do js

<script th:src="@{​​​​​/webjars/jquery/jquery.min.js}​​​​​"></script>
<script th:src="@{​​​​​/webjars/bootstrap/js/bootstrap.min.js}​​​​​"></script>

SE COLOCARMOS SÓ BARRA NO GETMAPPING CONSEGUIMOS ACESSAR A PAGINA SEM DIRECIONAR UM PATH PARA O localhost

passamos o path para o constructor do model and view
		ModelAndView view = new ModelAndView("static/sucess");

o repository.findAll(); devolve uma lista de convidados Entity

para fazer a repository colocamos a classe model dentro do parametro do Jpa, junto com o Long

@Repository
public interface IT_ServiceRepository extends JpaRepository<IT_ServiceModel, Long>{
}

Jpa vem pra resolver na questão de persistencia de dados
depois do findAll do repository temos que guardar esse retorno numa lista do tipo da entidade 

List<ConvidadosEntity> convidados = repository.findAll();

dentro da view podemos adicionar objs que são retornados do repository.findAll()
passamos uma string e o obj, a string é como se fosse um alias no banco de dados
a string REPRESENTA O OBJ, 
é como se o metodo pegasse o obj e jogasse na string para recuperarmos na tela
é como se fosse um depara
view.addObject('convidados',convidados)

<body>
<div class="panel panel-default" style="margin: 10px">
<div class="panel-heading">
<h1 class="panel-title">Lista de convidados</h1>
</div>
<div class="panel-body">
<table class="table">
<thead>
<tr>
<th>Nome</th>
<th>Acompanhantes</th>
</tr>
</thead>
<tbody>
<tr>
<td>João</td>
<td>3</td>
</tr>
</tbody>
</table>
</div>
</div>
</body>

o obj que passamos para a tela, ele precisa ser iterado pois chega como uma lista de obj, então passamos para thymeleaf um for each. Passamos a lista de obj 

<tr th:each="convidado : ${convidados}">
<td th:text="${convidado.nome}"></td>
<td th:text="${convidado.quantidadeAcompanhantes}"></td>
</tr>

insert into tb_convidados(acompanhante,email,nome)values('3','email@teste.com','fulano')

insert into tb_convidados(acompanhante,email,nome)values('2','email@teste.com','teste')

<form class="form-inline" method="POST" th:object="${convidado}" th:action="@{/convidados}" style="margin: 20px 0">
<div class="form-group">
<input type="text" class="form-control" placeholder="Nome" th:field="*{nome}" />
<input type="text" class="form-control" placeholder="E-mail" th:field="*{email}" />
<input type="text" class="form-control" placeholder="Acompanhantes" th:field="*{acompanhante}"/>
<button type="submit" class="btn btn-primary">Adicionar</button>
</div>
</form>


podemos passar um obj vazio para o html, só instanciarmos a Entidade, sem guardar em nenhuma variavel, e passamos como uma string no exemplo acima e no abaixo

view.addObject("objConvidado", new ConvidadosEntity());

capturamos o obj atraves desse form 

<form class="form-inline" method="POST" th:object="${convidado}"  style="margin: 20px 0">
<div class="form-group">
<input type="text" class="form-control" placeholder="Nome" th:field="*{nome}" />
<input type="text" class="form-control" placeholder="E-mail" th:field="*{email}" />
<input type="text" class="form-control" placeholder="Acompanhantes" th:field="*{acompanhante}"/>
<button type="submit" class="btn btn-primary">Adicionar</button>
</div>
</form>

quando colocamos a action como post, chamamos como um Post, ele pede algo na assinatura do método, então podemos ter duas /convidados

quando não passamos nenhum parametro ele chama @GetMapping e não pede nada na assinatura do metodo

quando a gente chama como o method Post no html, precisamos passar o ConvidadosEntity, dai ele pedi os ConvidadosEntity na assinatura do metodo olhe o html abaixo chegando um ConvidadosEntity em um obj vazio do metodo @GetMapping, e logo em seguida passando os campos a serem preenchios, conforme os campos da Entity, depois o form escuta o method=POST e seguida é chamado @PostMapping pedindo um ConvidadosEntity

meus Erros : notation repository, controller, entity
parametro do metodo que retorna uma model and view,
notation do
colocar a dependencia do thymeleaf, ele não roda o html

colocar o link href do bootstrap 
<link th:href="@{/webjars/bootstrap/css/bootstrap.min.css}"
	rel="stylesheet" />
<link th:href="@{/webjars/bootstrap/css/bootstrap-theme.min.css}"
	rel="stylesheet" />

no repository é uma interface
acrescentar a notation no Repository
------------------------------------------------------
A06
o bootstrap acontece por conta dos links no html

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
xmlns:th="http://www.thymeleaf.org">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />
<title>Cadastro Convidados</title>
<link th:href="@{/webjars/bootstrap/css/bootstrap.min.css}"
rel="stylesheet" />
<link th:href="@{/webjars/bootstrap/css/bootstrap-theme.min.css}"
rel="stylesheet" />
</head>

<body>

 <div class="container">
<div class="jumbotron">
<h1 class="display-4">Lista de convidados</h1>
</div>
<div class="card">
<form class="card-body" method="POST" th:object="${convidado}"
th:action="@{/convidados}">
<div class="row">
<div class="form-group mb-3 col-sm">
<label for="nome">Nome</label> <input type="text"
class="form-control mt-3" placeholder="Nome do convidado"
th:field="*{nome}">
</div>
<div class="form-group mb-3 col-sm">
<label for="email">Email</label> <input type="email"
class="form-control mt-3" placeholder="E-mail do convidado"
th:field="*{email}">
</div>
<div class="form-group mb-3 col-sm">
<label for="acompanhate">Acompanhante</label> <input type="text"
class="form-control mt-3"
placeholder="quantidade do acompanhante"
th:field="*{acompanhante}">
</div>
</div>
<button type="submit" class="btn btn-secondary">Adicionar</button>
</form>
</div>
<table class="table" >
<thead>
<tr>
<th scope="col">#</th>
<th scope="col">Nome</th>
<th scope="col">E-mail</th>
<th scope="col">Acompanhante</th>
<th scope="col">Ação</th>
</tr>
</thead>
<tbody>
<tr th:each="convidado : ${convidados}">
<th th:text="${convidado.id}"scope="row"></th>
<td th:text="${convidado.nome}"></td>
<td th:text="${convidado.email}"></td>
<td th:text="${convidado.acompanhante}"></td>
<td>
<a th:href="@{/convidados/{id}(id = ${convidado.id})}" class="btn btn-primary">editar</a>
<a th:href="@{/editar}" class="btn btn-danger">excluir </a>
</td>
</tr>
</tbody>
</table>
</div>
<script th:src="@{/webjars/jquery/jquery.min.js}"></script>
<script th:src="@{/webjars/bootstrap/js/bootstrap.min.js}"></script>
</body>
</html>

8:13
<a th:href="@{/convidados/{id}(id = ${convidado.id})}" class="btn btn-primary">editar</a>
<a th:href="@{/editar}" class="btn btn-danger">excluir </a>

passamos um path variable dentro da assinatura do metodo, como parametro

    @GetMapping("convidados/{id}")
    public ModelAndView editar(@PathVariable Long id){

quando passamos o @PathVariable estamos passando uma variavel do path 
o campo que recebemos do @GetMapping("convidados/{id}) é passando para dentro do metodo como um parametro public ModelAndView editar(@PathVariable Long id)

existe um metodo no Jpa chamado findByID e ele espera um Long, que passado pelo @PathVariable id
repository.findById(id);

o findByID devolve um optional, e temos que passar um get pra ele pegar o obj do Id, e ele devolve um unico item da base Jpa
repository.findById(id).get(); 

ConvidadosModel convidadoId = repository.findById(id).get();

ModelAndView é modelo e pagina  e conseguimos inserir obj dentro da pagina

quando damos um submit ele envia o id para o metodo para fazer o update

<form class="card-body" method="POST" th:object="${objConvidadoForm}"
              th:action="@{/}">
            <div class="row">
              <div>
                <input type="hidden" class"form-control mt-3" placeholder="Nome do Convidado" th:field="*{id}">
              </div>
                <div class="form-group mb-3 col-sm">
                    <label for="nome">Nome</label> <input type="text"
                                                          class="form-control mt-3" placeholder="Nome do convidado"
                                                          th:field="*{nome}">
                </div>
                <div class="form-group mb-3 col-sm">
                    <label for="email">Email</label> <input type="email"
                                                            class="form-control mt-3" placeholder="E-mail do convidado"
                                                            th:field="*{email}">
                </div>
                <div class="form-group mb-3 col-sm">
                    <label for="acompanhate">Acompanhante</label> <input type="text"
                                                                         class="form-control mt-3"
                                                                         placeholder="quantidade do acompanhante"
                                                                         th:field="*{acompanhante}">
                </div>
            </div>
            <button type="submit" class="btn btn-primary btn-lg">Adicionar</button>
        </form>

o metodo que faz a busca na base conforme o id que passamos
quando passamo no html é uma request map
<a th:href="@{/convidados/{id}(id = ${convidado.id})}" class="btn btn-primary">editar</a>

aqui o id é substituido pelo numero /convidados/{id}
pelo metodo precisamos receber o parametro que foi passado no html e passamos a notation @PathVariable e o tipo de dado que estamos recebendo

quando retornamos a view com o obj dentro dela
@GetMapping("/convidados/{id}")
    public ModelAndView editar(@PathVariable Long id){

        ConvidadosModels objId = repository.findById(id).get();
        ModelAndView view = new ModelAndView("convidados/index3");

        view.addObject("objId", objId);

        retur n view;
    }

------------------------------------------------------
A08 180521

JpaRepository ele localiza o banco atraves do application properties, pegando chave/valor

nessa aula fazemos uma refactor
nesse caso, não podemos expor coisas do bancos
não podemos expor coisas do banco no controller
na entidade temos o nome da tabela, que não podemos expor
não podemos chamar a repository direto, nesse caso temos que implementar a camada service, cuidando da intermedio da controller e do repository. Chamamos a service e depois a repository
dto vai representar o obj que esta na tela

temos mais um pacote que faz o intermedio entre o controller e a repository

>criamo a camada service como pacote e depois criamos um contrato (interface java) > ConvidadosService (interface(contrato)) 
a interface não faz a implementação, ela só diz quais metodos que serão implementados, e quem implementa a interface é que faz a implementação desse metodos (sobreescrevendo eles)

>ConvidadosService > ConvidadosDto salvarConvidados(ConvidadosDto convidadoDto);

dto faz interface entre controller e a entidade
>criamos uma pacote dto, a classe ConvidadosDto
tudo isso para não expor a entidade na camada de controller

depois transformamos o dto em uma entidade 

quem quiser ser um ConvidadosService tera que implementar os metodos dele

depois dos dtos, temos que implementar os getters and setters

temos o metodo listar na controller 
fazer a assinatura dele no ConvidadosService
>listaConvidados() e ele devolve uma lista de ConvidadosEntity, então colocamos
List<ConvidadosDto> listarConvidados(), pois não queremos expor os ConvidadosEntity (Entidade) tudo isso na interface. colocamos apenas a assinatura dos metodos

depois colocamos na interface ConvidadosService o metodo editarConvidados() que está na controller. 
ConvidadosDto editarConvidados(Long id);

depois falta o excluir da camada controller
void excluirConvidados(Long id);

basicamente trocamos toda a exposição da camada controller, onde os metodos retornam a entidade

depois da service é importante nos criarmos um pacote impl com a classe ConvidadosServiceImpl 

nessa classe fazemos o implements da interface

public class ConvidadosServiceImpl implements ConvidadosService {}

nele precisamos implementar todos os metodos da interface pai, nele fazemos toda implementação dos metodos

na classe ConvidadosServiceImpl temos que colocar o @Service, dizendo que aquela classe é uma service

não queremos que a classe controller tenha chamada para a repository, chamamos a repository na service

@Autowired 
ConvidadosRepository repository;

depois temos que parsear o dto para entity
para fazermos o metodo :

@Override
	public ConvidadosDto salvarConvidados(ConvidadosDto convidadoDto) {		
		ConvidadosEntity entity = convidadoDto.toEntity();		
		entity =  repository.save(entity);
		ConvidadosDto convidadosDto = fromConvidadosEntityToConvidadosDto(entity);
		return convidadosDto;
	}

como o metodo convidadoDto.toEntity() // temos a transformação de dto para entity
a conversão do dto para um entidade

1:02

parte2 

a injeção do controle sempre é da interface 
@Autowired
private ConvidadosService service;

<dependency>
<groupId>javax.validation</groupId>
<artifactId>validation-api</artifactId>
</dependency>

------------------------------------------------------
A09

adicionar validação 
dependencia spring-boot-stater-validation

JPA COM HIBERNATE
HEROKU USA POSTGREE 
h2 eé usado para teste unitario

a dependencia locator core, é para versionamento de pacotes

esse como inputamos erros na tela
temos que colocar em todos os campos do html
<div class="form-group col-md-6 mt-3">
	      		<label for="nome">SKU:</label>
	     	 	<input type="text" class="form-control" th:errorclass="is-invalid" placeholder="SKU do produto" th:field="*{sku}">
	     	 	<div th:errors="*{sku}" class="invalid-feedback"></div>
</div>

@GeneratedValue(strategy = GenerationType.IDENTITY)
é o cara que gera a chave

na entidade podemos colocar o nome da tabela
@Entity(name = "tb_produto")
se não colocar ele assume o nome da classe, ProdutosEntity

passamos a entidade e tipo do id, abaixo
public interface ProdutoRepository extends JpaRepository<ProdutoEntity, Long>{


dentro da camada serviceImpl fazemos a ingestão do repository
E implementamos os metodos da serviceEntity(ProdutosService)

@Autowired
	private ProdutoRepository repository;
------------------------------------------------------
A 
------------------------------------------------------
A 
------------------------------------------------------
A 
------------------------------------------------------
A 
------------------------------------------------------
A 
------------------------------------------------------
A 
------------------------------------------------------