A01-230321

http://
protocol 

localhost:
hostname

8888
port 

/hello
path

http://localhost:8888/hello

 
get / não tão seguro 


gerar um arquivo war 
ou .jar 
clicar em deploy 
lib fica todas as dependencias


onde muda a porta do tomcat é no file server

file > new > dynamic web > Project name: AppTest > default location

new server (aba) > apache > next > tomcat installation directory: path/name/tomcat/(raiz) > JRE default: jdk11 or jdk 8 > next > add name: appTest > finish

------------------------------------------------------
A02.1 250321

src > package:br.com.fiap > new class: OiMundoServlet

@WebServlet() > faz o import do javax 

> @WebServlet(urlPatterns = "/oi")

> class OiMundoServlet extends HttpServlet {

>crtl espaco > service > @override

> PrintWriter out = resp.getWriter();

> out.println("<html>");
  out.println("<body>");
  out.println("Hello world,");
  out.println("<body>");
  out.println("<html>");

------------------------------------------------------
A03.1

file > new > maven project > create a simple  project (skip archetype.. > next >group id: br.com.fiap > artifact: spring-mvc > version: snapshot > packaging: jar > name: spring-mvc >

pom é onde config as dependencias
resources é onde ficam os htmls e javascripts

<build>
<sourceDirectory>src/main/java</sourceDirectory>

  <plugins>
  <plugin>
  <artifactId>maven-compiler-plugin</artifactId>
  <version>3.8.1</version>
  <configuration>
  <source>11.0</source>
  <target>11.0</target>
  </configuration>
  </plugin>
  
  <plugin>
  <artifactId>maven-war-plugin</artifactId>
                                  <version>3.3.1</version>
     <configuration>             <warSourceDirectory>src/main/webapp</warSourceDirectory>
     </configuration>
  </plugin>
  </plugins>
</build>

abaixo do tag description or name

maven > update project >

criar folder WEB-INF dentro de webapp 
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://xmlns.jcp.org/xml/ns/javaee"
  xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
  id="WebApp_ID" version="3.1">
  <display-name>spring-mvc</display-name>

  <welcome-file-list>
  <welcome-file></welcome-file>
  </welcome-file-list>
</web-app> 

lembrar de identar 

webapp > html file > name:ola.html

adicionar ao pom.xml

<properties>
  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  <spring.version>5.1.5.RELEASE</spring.version>
</properties>


<dependencies>
  <!-- DEPENDÊNCIAS DO SPRING -->
  <dependency>
  <groupId>org.springframework</groupId>
  <artifactId>spring-core</artifactId>
  <version>${​​​​​spring.version}​​​​​</version>
  </dependency>
</dependencies>

lembrar dos settings

pom onde configuramos as dependencias

------------------------------------------------------
A05

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
xmlns:th="http://www.thymeleaf.org">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />
<title>Cadastro Convidados</title>
<link th:href="@{​​​​​/webjars/bootstrap/css/bootstrap.min.css}​​​​​"
rel="stylesheet" />
<link th:href="@{​​​​​/webjars/bootstrap/css/bootstrap-theme.min.css}​​​​​"
rel="stylesheet" />
</head>

<body>
<div class="panel panel-default" style="margin: 10px">
<div class="panel-heading">
<h1 class="panel-title">Lista de convidados</h1>
</div>
<div class="panel-body">
<form class="form-inline" method="POST" th:object="${​​​​​convidado}​​​​​" th:action="@{​​​​​/convidados}​​​​​" style="margin: 20px 0">
<div class="form-group">
<input type="text" class="form-control" placeholder="Nome" th:field="*{​​​​​nome}​​​​​" />
<input type="text" class="form-control" placeholder="E-mail" th:field="*{​​​​​email}​​​​​" />
<input type="text" class="form-control" placeholder="Acompanhantes" th:field="*{​​​​​acompanhante}​​​​​"/>
<button type="submit" class="btn btn-primary">Adicionar</button>
</div>
</form>
<table class="table">
<thead>
<tr>
<th>Nome</th>
<th>E-mail</th>
<th>Acompanhantes</th>
</tr>
</thead>
<tbody>
<tr th:each="convidado : ${​​​​​convidados}​​​​​">
<td th:text="${​​​​​convidado.nome}​​​​​"></td>
<td th:text="${​​​​​convidado.email}​​​​​"></td>
<td th:text="${​​​​​convidado.acompanhante}​​​​​"></td>
</tr>
</tbody>
</table>
</div>
</div>
<script th:src="@{​​​​​/webjars/jquery/jquery.min.js}​​​​​"></script>
<script th:src="@{​​​​​/webjars/bootstrap/js/bootstrap.min.js}​​​​​"></script>
</body>
</html>


a primeira action request mapping  @GetMapping só serve para abrir o html, depois pelo botão atraves do post passamos os dados para uma outra view 
então no form html inicial tem uma action que tem o path e o method dela
esse 	@PostMapping("/salve") escuta esse html 

e depois o metodo save salva no Jpa 	repository.save(servicemodel);

podemos usar duas nomeclaturas para a Model, tanto Entity quanto Models

a partir do momento que colocamos o get mapping ele começa a escutar aquele contexto
@GetMapping("/adding")

o application.properties mudamos a port que o servidor esta escutando

para add o bootstrap precisamos adicionar no pom as dependencias

<dependency>
    <groupId>org.webjars</groupId>
    <artifactId>jquery</artifactId>
    <version>3.6.0</version>
</dependency>


<dependency>
    <groupId>org.webjars</groupId>
    <artifactId>bootstrap</artifactId>
    <version>5.0.0-beta3</version>
</dependency>

    
<dependency>
  <groupId>org.webjars</groupId>
  <artifactId>webjars-locator-core</artifactId>
  <version>0.46</version>
</dependency>

ai no final do body antes de FECHAR, temos que colocar as dependencias do js

<script th:src="@{​​​​​/webjars/jquery/jquery.min.js}​​​​​"></script>
<script th:src="@{​​​​​/webjars/bootstrap/js/bootstrap.min.js}​​​​​"></script>

SE COLOCARMOS SÓ BARRA NO GETMAPPING CONSEGUIMOS ACESSAR A PAGINA SEM DIRECIONAR UM PATH PARA O localhost

passamos o path para o constructor do model and view
		ModelAndView view = new ModelAndView("static/sucess");

o repository.findAll(); devolve uma lista de convidados Entity


------------------------------------------------------
A06


------------------------------------------------------
A 
------------------------------------------------------
A 
------------------------------------------------------
A 
------------------------------------------------------
A 
------------------------------------------------------
A 
------------------------------------------------------
A 
------------------------------------------------------
A 
------------------------------------------------------
A 
------------------------------------------------------