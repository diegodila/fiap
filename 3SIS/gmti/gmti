A03-150321

git branch // mostra as branchs 
git flow -> cria uma structure de gereciamento de fonts 
cria a feature como tarefa // 
é um cod especifico (feature) e depois destruo 
no git flow posso criar bugfix/hotfix
quem controla tudo é o git flow

git flow init 
git branch
git flow feature start criacaocronogramachallenge
git branch
git flow feature finish [nome-da-branch]
git flow release start [nome-da-release-r1.01]
git branch 
git flow release finish [nome-da-release] -m 'Release de kickoff do projeto'
git branch 
git tag // mostra a release
git checkout main 
git branch 
git push -u origin main 
git push -u origin develop
git flow bugfix start correcaocronograma 
git branch
git status
git diff read.me
git add . 
git status
gcmsg 'alterações do read.me com complementação de texto'
git status
git flow  bugfix finish correcaocronograma //fecha a bugfix
exit
git pull --all // push tudo

-------------------------------------------------
a01-220321

        // atributo
        private int resultado = 0;
 
        // método somar
        public int somar( int n1, int n2 ){
 
            resultado = n1 + n2;
            return resultado;
        }
 
        // método subtrair
        public int subtrair( int n1, int n2 ){
 
            resultado = n1 - n2;
            return resultado;
        }        
 
        // método multiplicar
        public int multiplicar( int n1, int n2 ){
 
            resultado = n1 * n2;
            return resultado;
        }
 
        // método dividir
        public int dividir( int n1, int n2 ){
 
            resultado = n1 / n2;
            return resultado;
        }


    /**
    * Teste de somar na Calculadora.
    */
   @Test
   public void testeSomar() {
       int nro1 = 5;
       int nro2 = 5;
       Calculadora calc= new Calculadora();
       int resultadoEsperado = 10;
       int resultadoReal= calc.somar(nro1, nro2);
       assertEquals(resultadoEsperado, resultadoReal);
   }

new java project -> QA
src > new > Class > Calculator > sem packages > public
src > new > JUnit test case (class)> New JUnit 4 test > Name: TestSoma

todo metodo JUnit tem que ter o @Test antes de cada método e o import static org.junit.Assert.*;

@Test
   public void testeSomar() {
       int nro1 = 5;
       int nro2 = 5;
       Calculadora calc= new Calculadora();
       int resultadoEsperado = 10;
       int resultadoReal= calc.somar(nro1, nro2);
       assertEquals(resultadoEsperado, resultadoReal);
   }

assertEquals -> mostra o resultado do test
TestSoma (class) > run as > Junit Test > 2 class rodando
fazer um test mudando o metodo somar da calculadora 


criando outro metodo na classe TestSoma > não esquecer o @Test > colocar outro nome no metodo > TestSomar2 

criando outra classe > src > new > JUnit test case (class) > new Junit test case 4 > name: TestSubtrair

@Test
   public void testeSubtrair1() {
       int nro1 = 5;
       int nro2 = 3;
       Calculadora calc= new Calculadora();
       int resultadoEsperado = 2;
       int resultadoReal= calc.subtrair(nro1, nro2);
       assertEquals(resultadoEsperado, resultadoReal);
   }

assertEqualss pode ser usado com qualquer valor de retorno

testSuite é empacotar as classes de testes 
src > other > Junit test suite > Name: PacoteCalculadora > (mostra as JUnits que voce quer colocar no pacote > Select all >
run > pacote > dryll down

--------------------------------------------------------
a02-220321  JUnit + Git 
    
DUAS FORMAS POPULARES DE USAR JUNIT:
    
AULA PASSADA...
    
1o CRIAR UMA CLASSE JUNIT PARA CADA MÉTODO DA CLASSE QUE VOCÊ QUER TESTAR E DENTRO DA JUNIT, CRIAR VÁRIOS MÉTODOS TESTANDO CADA UM, UMA COMBINAÇÃO DE INPUTS/OUTPUTS
    
2o CRIAR JUNIT TEST SUITE E JUNTAR TODAS AS JUNIT TEST CASES PARA UMA MESMA CLASSE DE OBJETOS FONTE
    
NESTA AULA...
    
1o CRIAR UMA JUNIT TEST CASE ÚNICA PARA A CLASSE A SER TESTADA. DENTRO DELA, CRIAR TODOS OS MÉTODOS DE TESTES COM TODAS COMBINAÇÕES DE INPUT/OUTPUT


public class Boasvindas{
   private String menssagem;
   //Construtor de Objeto na Classe
   public Boasvindas(String mens){
      this.menssagem = mens; 
   }
   // Exibição da mensagem
   public String exibirMenssagem(){
      System.out.println(this.menssagem);
      return this.menssagem;
   }   
   // Exibição da parte fixa da mensagem
   public String completarMenssagem(){
        String compmens;
        compmens = "Ola! Seja bem vindo a sua calculadora pessoal";
        System.out.println(compmens);
        return compmens;
   }
}


A04-220321

Cobit
metas e controles

------------------------------------------------------
A06-050421

gestao de desempenho 
inspecionar é o primeiro passo
controle de qualidade
definir indicadores representativos 
depois coletar os dados 
inspeção - anot fontes liberados sem erro, por

 programador.

anotação dos valores inspecionados

sigma é estatistica do desvio padrão 


a reta de cima do sigma é limite sup de tolerancia
a reta de baixo do sigma é o limite inf de tolerancia

controle de qualidade -> 

tomar cuidado com testes e produtividade lá em cima
do limite superior de tolerancia, 

quando a performance individual muda, devemos recalcular o sigma

Passos do controle estatístico de processos, após coletadas as métricas na inspeção:
plotar o grafico 
primeiro:

Calculo média e limites de tolerância e registro novas observações para ver se estão dentro dos limites históricos de performance da equipe:

Caso ocorram desvios, eles precisam ser estudados e caso o comportamento tenha se modificado definitivamente para cima ou para baixo dos limites, deve-se ajustar esses limites de controle:

proximo passo: garantia da qualidade

grafico de espinha de peixe ou graficode chicawa

Com base no gráfico de controle, fazemos análises de causa de desvios para promover a Garantia da qualidade


------------------------------------------------------
A07- CMMI 
CMMI serve para capacitar e ver se voce é um profissional maduro
ele serve para medir os resultados de uma empresa e ver se ela é madura

2 

cmmi é pra começar do basico


nivel 2 reqm é gestao de requisitos - monitorar e controlar o andamento do projeto
tudo que vamos usar app de 3 - gestao da qualidade do produto, medir projetos
criar indicadores de desempenho, adotar SCRUM 

NIVEL 3 
GERENCIAR EQUIPES, sequencializar as atividades, gerenciar os riscos
documentar os processos, explicar scrum passo a passo. quais sao os passos para uma arquitetura
levantamento de requisitos - precisamos documentar os processos - auxilia o treinamento de pessoas
desenvolvimento de requisitos - verificaçao e validaçao - tomada de decisao - tomada decisoes rapidas - mudanças de requisitos 
cmmi diz pra deixar o reteiro para a tomada de decisao -

mps.br (brasileiro)
voce tem finaciamentos faceis, ele é incentivado pelo ministerio de ciencia e tecnologia
voce tem oportunidade de financiar 14 anos

cmmi tem 4 niveis de certificaçao o nivel 1 nao certifica 
no nivel 2 do cmmi é tudo envolvido  a gestao 


------------------------------------------------------
A08 TOGAF

TOGAF 4 processos 
app dados e infra

missao - porque existe
visao - ate onde chegar 
valores - etica 
objetivo - ser lider no futuro 

COmeçamos o TOGAF - Estrutura de trabalho para arquitetar soluções

1a Fase: PRELIMINAR - vamos conhecer o que a empresa faz e quer

missao - Solucionar e inovar em softwares 
visao - fornecer atendimento em excelencia a times ti 
valores - entrega e atendimento, primando planejamento e controle 
objetivos e metas - estar entre as 30 melhores software houses do brasil em 13 anos  

------------------------------------------------------
A09
------------------------------------------------------
A10
------------------------------------------------------
A11
------------------------------------------------------
A12
------------------------------------------------------
A13
------------------------------------------------------
A14
------------------------------------------------------
A15
------------------------------------------------------
A16
------------------------------------------------------
A17
------------------------------------------------------
A18
------------------------------------------------------
A19
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
